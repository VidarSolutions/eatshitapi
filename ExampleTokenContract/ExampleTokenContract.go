// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ExampleTokenContract

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// VidarUtilitiesslice is an auto generated low-level Go binding around an user-defined struct.
type VidarUtilitiesslice struct {
	Len *big.Int
	Ptr *big.Int
}

// ApiMetaData contains all meta data concerning the Api contract.
var ApiMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"GetSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"address_to_string\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_bytes32\",\"type\":\"bytes32\"}],\"name\":\"bytes32ToHexString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes1\",\"name\":\"_char\",\"type\":\"bytes1\"}],\"name\":\"charToHexChar\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"\",\"type\":\"bytes1\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"hex_hash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_orgMsg\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_avaxAdd\",\"type\":\"string\"}],\"name\":\"checkHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"a\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"b\",\"type\":\"string\"}],\"name\":\"compare\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateGasFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_string1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_string2\",\"type\":\"string\"}],\"name\":\"getHex_Hash\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_str\",\"type\":\"string\"}],\"name\":\"getSlice\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_len\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ptr\",\"type\":\"uint256\"}],\"internalType\":\"structVidarUtilities.slice\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isValidAVAXAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"format\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"args\",\"type\":\"string[]\"}],\"name\":\"printf\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"toHexString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b506040518060400160405280600c81526020017f4d795669646172546f6b656e00000000000000000000000000000000000000008152506040518060400160405280600481526020017f4d56544b0000000000000000000000000000000000000000000000000000000081525081600390816200008f9190620007c0565b508060049081620000a19190620007c0565b5050506000600560006101000a81548160ff021916908315150217905550620000df620000d36200018760201b60201c565b6200018f60201b60201c565b33600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604051806080016040528060548152602001620046fa6054913960076040516200014a9062000902565b90815260200160405180910390209081620001669190620007c0565b506200018133678ac7230489e800006200025560201b60201c565b62000b18565b600033905090565b6000600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b620002656200027b60201b60201c565b6200027782826200030c60201b60201c565b5050565b6200028b6200018760201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16620002b16200047960201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16146200030a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000301906200097a565b60405180910390fd5b565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036200037e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200037590620009ec565b60405180910390fd5b6200039260008383620004a360201b60201c565b8060026000828254620003a6919062000a3d565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405162000459919062000a89565b60405180910390a36200047560008383620004d060201b60201c565b5050565b6000600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b620004b3620004d560201b60201c565b620004cb8383836200052a60201b6200186e1760201c565b505050565b505050565b620004e56200052f60201b60201c565b1562000528576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200051f9062000af6565b60405180910390fd5b565b505050565b6000600560009054906101000a900460ff16905090565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620005c857607f821691505b602082108103620005de57620005dd62000580565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620006487fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000609565b62000654868362000609565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620006a16200069b62000695846200066c565b62000676565b6200066c565b9050919050565b6000819050919050565b620006bd8362000680565b620006d5620006cc82620006a8565b84845462000616565b825550505050565b600090565b620006ec620006dd565b620006f9818484620006b2565b505050565b5b81811015620007215762000715600082620006e2565b600181019050620006ff565b5050565b601f82111562000770576200073a81620005e4565b6200074584620005f9565b8101602085101562000755578190505b6200076d6200076485620005f9565b830182620006fe565b50505b505050565b600082821c905092915050565b6000620007956000198460080262000775565b1980831691505092915050565b6000620007b0838362000782565b9150826002028217905092915050565b620007cb8262000546565b67ffffffffffffffff811115620007e757620007e662000551565b5b620007f38254620005af565b6200080082828562000725565b600060209050601f83116001811462000838576000841562000823578287015190505b6200082f8582620007a2565b8655506200089f565b601f1984166200084886620005e4565b60005b8281101562000872578489015182556001820191506020850194506020810190506200084b565b868310156200089257848901516200088e601f89168262000782565b8355505b6001600288020188555050505b505050505050565b600081905092915050565b7f6f6e6c794f776e65720000000000000000000000000000000000000000000000600082015250565b6000620008ea600983620008a7565b9150620008f782620008b2565b600982019050919050565b60006200090f82620008db565b9150819050919050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006200096260208362000919565b91506200096f826200092a565b602082019050919050565b60006020820190508181036000830152620009958162000953565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000620009d4601f8362000919565b9150620009e1826200099c565b602082019050919050565b6000602082019050818103600083015262000a0781620009c5565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062000a4a826200066c565b915062000a57836200066c565b925082820190508082111562000a725762000a7162000a0e565b5b92915050565b62000a83816200066c565b82525050565b600060208201905062000aa0600083018462000a78565b92915050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b600062000ade60108362000919565b915062000aeb8262000aa6565b602082019050919050565b6000602082019050818103600083015262000b118162000acf565b9050919050565b613bd28062000b286000396000f3fe608060405234801561001057600080fd5b50600436106101965760003560e01c806306fdde031461019b578063095ea7b3146101b957806317184d12146101e957806318160ddd1461021957806323b872dd14610237578063274695d314610267578063313ce5671461029757806339509351146102b55780633a96fdd7146102e55780633f4ba83a1461031557806340c10f191461031f57806342966c681461033b57806353191503146103575780635c975abb1461038757806363e1cbea146103a557806370a08231146103d5578063715018a61461040557806379cc67901461040f5780637f908bf21461042b5780638456cb5914610449578063861458d8146104535780638da5cb5b14610471578063908c0eea1461048f57806395d89b41146104bf5780639a329a26146104dd578063a3fa67ed1461050d578063a457c2d71461053d578063a9059cbb1461056d578063b387ef921461059d578063b6eec244146105bb578063c68b3787146105eb578063dd005a831461061b578063dd62ed3e1461064b578063f2fde38b1461067b575b600080fd5b6101a3610697565b6040516101b0919061265d565b60405180910390f35b6101d360048036038101906101ce9190612727565b610729565b6040516101e09190612782565b60405180910390f35b61020360048036038101906101fe91906127f5565b61074c565b6040516102109190612831565b60405180910390f35b610221610792565b60405161022e919061285b565b60405180910390f35b610251600480360381019061024c9190612876565b61079c565b60405161025e9190612782565b60405180910390f35b610281600480360381019061027c91906128c9565b6107cb565b60405161028e919061265d565b60405180910390f35b61029f610844565b6040516102ac9190612912565b60405180910390f35b6102cf60048036038101906102ca9190612727565b61084d565b6040516102dc9190612782565b60405180910390f35b6102ff60048036038101906102fa9190612a62565b610884565b60405161030c9190612782565b60405180910390f35b61031d61089f565b005b61033960048036038101906103349190612727565b6108b1565b005b61035560048036038101906103509190612ada565b6108c7565b005b610371600480360381019061036c91906128c9565b6108db565b60405161037e919061265d565b60405180910390f35b61038f610b60565b60405161039c9190612782565b60405180910390f35b6103bf60048036038101906103ba9190612b07565b610b77565b6040516103cc919061265d565b60405180910390f35b6103ef60048036038101906103ea91906128c9565b610db3565b6040516103fc919061285b565b60405180910390f35b61040d610dfb565b005b61042960048036038101906104249190612727565b610e0f565b005b610433610e2f565b604051610440919061285b565b60405180910390f35b610451610f43565b005b61045b610f55565b604051610468919061285b565b60405180910390f35b610479610f97565b6040516104869190612b56565b60405180910390f35b6104a960048036038101906104a49190612b71565b610fc1565b6040516104b69190612bf8565b60405180910390f35b6104c7610ff5565b6040516104d4919061265d565b60405180910390f35b6104f760048036038101906104f29190612cf9565b611087565b604051610504919061265d565b60405180910390f35b610527600480360381019061052291906128c9565b6114ac565b6040516105349190612782565b60405180910390f35b61055760048036038101906105529190612727565b6114bf565b6040516105649190612782565b60405180910390f35b61058760048036038101906105829190612727565b611536565b6040516105949190612782565b60405180910390f35b6105a5611559565b6040516105b29190612b56565b60405180910390f35b6105d560048036038101906105d09190612d71565b61157f565b6040516105e29190612782565b60405180910390f35b61060560048036038101906106009190612e4e565b61159d565b604051610612919061265d565b60405180910390f35b61063560048036038101906106309190612a62565b61171d565b604051610642919061265d565b60405180910390f35b61066560048036038101906106609190612e7b565b611764565b604051610672919061285b565b60405180910390f35b610695600480360381019061069091906128c9565b6117eb565b005b6060600380546106a690612eea565b80601f01602080910402602001604051908101604052809291908181526020018280546106d290612eea565b801561071f5780601f106106f45761010080835404028352916020019161071f565b820191906000526020600020905b81548152906001019060200180831161070257829003601f168201915b5050505050905090565b600080610734611873565b905061074181858561187b565b600191505092915050565b6000600a8260f81c60ff1610156107775760308260f81c61076d9190612f4a565b60f81b905061078d565b60578260f81c6107879190612f4a565b60f81b90505b919050565b6000600254905090565b6000806107a7611873565b90506107b4858285611a44565b6107bf858585611ad0565b60019150509392505050565b60606107d6826114ac565b15610806576107ff8273ffffffffffffffffffffffffffffffffffffffff16601460ff16610b77565b905061083f565b6040518060400160405280601881526020017f4e6f7420612076616c696420417661782061646472657373000000000000000081525090505b919050565b60006012905090565b600080610858611873565b905061087981858561086a8589611764565b6108749190612f7f565b61187b565b600191505092915050565b60008180519060200120838051906020012014905092915050565b6108a7611d46565b6108af611dc4565b565b6108b9611d46565b6108c38282611e27565b5050565b6108d86108d2611873565b82611f7d565b50565b60606000602a67ffffffffffffffff8111156108fa576108f9612937565b5b6040519080825280601f01601f19166020018201604052801561092c5781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061096457610963612fb3565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106109c8576109c7612fb3565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060005b6014811015610b56576000816013610a129190612fe2565b6008610a1e9190613016565b6002610a2a919061318b565b8573ffffffffffffffffffffffffffffffffffffffff16610a4b9190613205565b90506000601082610a5c9190613236565b90506000816010610a6d9190613267565b83610a7891906132a4565b9050610a838261214a565b85856002610a919190613016565b6002610a9d9190612f7f565b81518110610aae57610aad612fb3565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350610ae68161214a565b85856002610af49190613016565b6003610b009190612f7f565b81518110610b1157610b10612fb3565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505050508080610b4e906132d9565b9150506109fa565b5080915050919050565b6000600560009054906101000a900460ff16905090565b606060006002836002610b8a9190613016565b610b949190612f7f565b67ffffffffffffffff811115610bad57610bac612937565b5b6040519080825280601f01601f191660200182016040528015610bdf5781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110610c1757610c16612fb3565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110610c7b57610c7a612fb3565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002610cbb9190613016565b610cc59190612f7f565b90505b6001811115610d65577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110610d0757610d06612fb3565b5b1a60f81b828281518110610d1e57610d1d612fb3565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080610d5e90613321565b9050610cc8565b5060008414610da9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da090613396565b60405180910390fd5b8091505092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610e03611d46565b610e0d600061223d565b565b610e2182610e1b611873565b83611a44565b610e2b8282611f7d565b5050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ef46040518060400160405280600981526020017f6f6e6c794f776e65720000000000000000000000000000000000000000000000815250610ee6600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166107cb565b610eef336107cb565b612303565b90610f35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2c919061265d565b60405180910390fd5b50610f3e610792565b905090565b610f4b611d46565b610f536123f0565b565b6000805a905060003a9050600061a4105a84610f719190612fe2565b610f7b9190612f7f565b905060008282610f8b9190613016565b90508094505050505090565b6000600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610fc96125b3565b600082905060006020820190506040518060400160405280835181526020018281525092505050919050565b60606004805461100490612eea565b80601f016020809104026020016040519081016040528092919081815260200182805461103090612eea565b801561107d5780601f106110525761010080835404028352916020019161107d565b820191906000526020600020905b81548152906001019060200180831161106057829003601f168201915b5050505050905090565b60606000835167ffffffffffffffff8111156110a6576110a5612937565b5b6040519080825280602002602001820160405280156110d45781602001602082028036833780820191505090505b50905060005b8451811015611179578481815181106110f6576110f5612fb3565b5b602001015160f81c60f81b82828151811061111457611113612fb3565b5b60200260200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815250508080611171906132d9565b9150506110da565b506000805b84518110156111c35784818151811061119a57611199612fb3565b5b602002602001015151826111ae9190612f7f565b915080806111bb906132d9565b91505061117e565b5060008183516111d39190612f7f565b67ffffffffffffffff8111156111ec576111eb612937565b5b6040519080825280601f01601f19166020018201604052801561121e5781602001600182028036833780820191505090505b509050606060008060005b865181101561149c577f25000000000000000000000000000000000000000000000000000000000000007effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191687828151811061128857611287612fb3565b5b60200260200101517effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19160361141d577f73000000000000000000000000000000000000000000000000000000000000007effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916876001836113089190612f7f565b8151811061131957611318612fb3565b5b60200260200101517effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916036114185788518310156114175788838151811061136457611363612fb3565b5b6020026020010151935060005b84518110156113f95784818151811061138d5761138c612fb3565b5b602001015160f81c60f81b8684806113a4906132d9565b9550815181106113b7576113b6612fb3565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080806113f1906132d9565b915050611371565b508080611405906132d9565b9150508280611413906132d9565b9350505b5b611489565b8681815181106114305761142f612fb3565b5b602002602001015185838151811061144b5761144a612fb3565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508180611485906132d9565b9250505b8080611494906132d9565b915050611229565b5083965050505050505092915050565b600080823b905060008114915050919050565b6000806114ca611873565b905060006114d88286611764565b90508381101561151d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161151490613428565b60405180910390fd5b61152a828686840361187b565b60019250505092915050565b600080611541611873565b905061154e818585611ad0565b600191505092915050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006115948461158f858561171d565b610884565b90509392505050565b60606000604067ffffffffffffffff8111156115bc576115bb612937565b5b6040519080825280601f01601f1916602001820160405280156115ee5781602001600182028036833780820191505090505b50905060005b602081101561171357600084826020811061161257611611612fb3565b5b1a60f81b60f81c9050600061163560108361162d9190613236565b60f81b61074c565b905060006116516010846116499190613448565b60f81b61074c565b905081856002866116629190613016565b8151811061167357611672612fb3565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350808560016002876116b39190613016565b6116bd9190612f7f565b815181106116ce576116cd612fb3565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350505050808061170b906132d9565b9150506115f4565b5080915050919050565b6060600083836040516020016117349291906134b5565b604051602081830303815290604052905060008180519060200120905061175a8161159d565b9250505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6117f3611d46565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611862576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118599061354b565b60405180910390fd5b61186b8161223d565b50565b505050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036118ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118e1906135dd565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611959576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119509061366f565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051611a37919061285b565b60405180910390a3505050565b6000611a508484611764565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114611aca5781811015611abc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ab3906136db565b60405180910390fd5b611ac9848484840361187b565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611b3f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b369061376d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611bae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ba5906137ff565b60405180910390fd5b611bb9838383612453565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611c3f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c3690613891565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611d2d919061285b565b60405180910390a3611d4084848461246b565b50505050565b611d4e611873565b73ffffffffffffffffffffffffffffffffffffffff16611d6c610f97565b73ffffffffffffffffffffffffffffffffffffffff1614611dc2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611db9906138fd565b60405180910390fd5b565b611dcc612470565b6000600560006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611e10611873565b604051611e1d9190612b56565b60405180910390a1565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611e96576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e8d90613969565b60405180910390fd5b611ea260008383612453565b8060026000828254611eb49190612f7f565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051611f65919061285b565b60405180910390a3611f796000838361246b565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611fec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fe3906139fb565b60405180910390fd5b611ff882600083612453565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561207e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161207590613a8d565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051612131919061285b565b60405180910390a36121458360008461246b565b505050565b6000600a8260ff1610156121c457816040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152506000815181106121a2576121a1612fb3565b5b602001015160f81c60f81b60f81c6121ba9190612f4a565b60f81b9050612238565b600a826040518060400160405280600181526020017f61000000000000000000000000000000000000000000000000000000000000008152506000815181106122105761220f612fb3565b5b602001015160f81c60f81b60f81c6122289190612f4a565b61223291906132a4565b60f81b90505b919050565b6000600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60606000612310856124b9565b9050600060405180604001604052808681526020018581525090506000600267ffffffffffffffff81111561234857612347612937565b5b60405190808252806020026020018201604052801561237b57816020015b60608152602001906001900390816123665790505b50905060005b60028110156123d35782816002811061239d5761239c612fb3565b5b60200201518282815181106123b5576123b4612fb3565b5b602002602001018190525080806123cb906132d9565b915050612381565b5060006123e08483611087565b9050809450505050509392505050565b6123f8612569565b6001600560006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861243c611873565b6040516124499190612b56565b60405180910390a1565b61245b612569565b61246683838361186e565b505050565b505050565b612478610b60565b6124b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124ae90613af9565b60405180910390fd5b565b60606007826040516124cb9190613b19565b908152602001604051809103902080546124e490612eea565b80601f016020809104026020016040519081016040528092919081815260200182805461251090612eea565b801561255d5780601f106125325761010080835404028352916020019161255d565b820191906000526020600020905b81548152906001019060200180831161254057829003601f168201915b50505050509050919050565b612571610b60565b156125b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125a890613b7c565b60405180910390fd5b565b604051806040016040528060008152602001600081525090565b600081519050919050565b600082825260208201905092915050565b60005b838110156126075780820151818401526020810190506125ec565b60008484015250505050565b6000601f19601f8301169050919050565b600061262f826125cd565b61263981856125d8565b93506126498185602086016125e9565b61265281612613565b840191505092915050565b600060208201905081810360008301526126778184612624565b905092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006126be82612693565b9050919050565b6126ce816126b3565b81146126d957600080fd5b50565b6000813590506126eb816126c5565b92915050565b6000819050919050565b612704816126f1565b811461270f57600080fd5b50565b600081359050612721816126fb565b92915050565b6000806040838503121561273e5761273d612689565b5b600061274c858286016126dc565b925050602061275d85828601612712565b9150509250929050565b60008115159050919050565b61277c81612767565b82525050565b60006020820190506127976000830184612773565b92915050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b6127d28161279d565b81146127dd57600080fd5b50565b6000813590506127ef816127c9565b92915050565b60006020828403121561280b5761280a612689565b5b6000612819848285016127e0565b91505092915050565b61282b8161279d565b82525050565b60006020820190506128466000830184612822565b92915050565b612855816126f1565b82525050565b6000602082019050612870600083018461284c565b92915050565b60008060006060848603121561288f5761288e612689565b5b600061289d868287016126dc565b93505060206128ae868287016126dc565b92505060406128bf86828701612712565b9150509250925092565b6000602082840312156128df576128de612689565b5b60006128ed848285016126dc565b91505092915050565b600060ff82169050919050565b61290c816128f6565b82525050565b60006020820190506129276000830184612903565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61296f82612613565b810181811067ffffffffffffffff8211171561298e5761298d612937565b5b80604052505050565b60006129a161267f565b90506129ad8282612966565b919050565b600067ffffffffffffffff8211156129cd576129cc612937565b5b6129d682612613565b9050602081019050919050565b82818337600083830152505050565b6000612a05612a00846129b2565b612997565b905082815260208101848484011115612a2157612a20612932565b5b612a2c8482856129e3565b509392505050565b600082601f830112612a4957612a4861292d565b5b8135612a598482602086016129f2565b91505092915050565b60008060408385031215612a7957612a78612689565b5b600083013567ffffffffffffffff811115612a9757612a9661268e565b5b612aa385828601612a34565b925050602083013567ffffffffffffffff811115612ac457612ac361268e565b5b612ad085828601612a34565b9150509250929050565b600060208284031215612af057612aef612689565b5b6000612afe84828501612712565b91505092915050565b60008060408385031215612b1e57612b1d612689565b5b6000612b2c85828601612712565b9250506020612b3d85828601612712565b9150509250929050565b612b50816126b3565b82525050565b6000602082019050612b6b6000830184612b47565b92915050565b600060208284031215612b8757612b86612689565b5b600082013567ffffffffffffffff811115612ba557612ba461268e565b5b612bb184828501612a34565b91505092915050565b612bc3816126f1565b82525050565b604082016000820151612bdf6000850182612bba565b506020820151612bf26020850182612bba565b50505050565b6000604082019050612c0d6000830184612bc9565b92915050565b600067ffffffffffffffff821115612c2e57612c2d612937565b5b602082029050602081019050919050565b600080fd5b6000612c57612c5284612c13565b612997565b90508083825260208201905060208402830185811115612c7a57612c79612c3f565b5b835b81811015612cc157803567ffffffffffffffff811115612c9f57612c9e61292d565b5b808601612cac8982612a34565b85526020850194505050602081019050612c7c565b5050509392505050565b600082601f830112612ce057612cdf61292d565b5b8135612cf0848260208601612c44565b91505092915050565b60008060408385031215612d1057612d0f612689565b5b600083013567ffffffffffffffff811115612d2e57612d2d61268e565b5b612d3a85828601612a34565b925050602083013567ffffffffffffffff811115612d5b57612d5a61268e565b5b612d6785828601612ccb565b9150509250929050565b600080600060608486031215612d8a57612d89612689565b5b600084013567ffffffffffffffff811115612da857612da761268e565b5b612db486828701612a34565b935050602084013567ffffffffffffffff811115612dd557612dd461268e565b5b612de186828701612a34565b925050604084013567ffffffffffffffff811115612e0257612e0161268e565b5b612e0e86828701612a34565b9150509250925092565b6000819050919050565b612e2b81612e18565b8114612e3657600080fd5b50565b600081359050612e4881612e22565b92915050565b600060208284031215612e6457612e63612689565b5b6000612e7284828501612e39565b91505092915050565b60008060408385031215612e9257612e91612689565b5b6000612ea0858286016126dc565b9250506020612eb1858286016126dc565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612f0257607f821691505b602082108103612f1557612f14612ebb565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612f55826128f6565b9150612f60836128f6565b9250828201905060ff811115612f7957612f78612f1b565b5b92915050565b6000612f8a826126f1565b9150612f95836126f1565b9250828201905080821115612fad57612fac612f1b565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000612fed826126f1565b9150612ff8836126f1565b92508282039050818111156130105761300f612f1b565b5b92915050565b6000613021826126f1565b915061302c836126f1565b925082820261303a816126f1565b9150828204841483151761305157613050612f1b565b5b5092915050565b60008160011c9050919050565b6000808291508390505b60018511156130af5780860481111561308b5761308a612f1b565b5b600185161561309a5780820291505b80810290506130a885613058565b945061306f565b94509492505050565b6000826130c85760019050613184565b816130d65760009050613184565b81600181146130ec57600281146130f657613125565b6001915050613184565b60ff84111561310857613107612f1b565b5b8360020a91508482111561311f5761311e612f1b565b5b50613184565b5060208310610133831016604e8410600b841016171561315a5782820a90508381111561315557613154612f1b565b5b613184565b6131678484846001613065565b9250905081840481111561317e5761317d612f1b565b5b81810290505b9392505050565b6000613196826126f1565b91506131a1836126f1565b92506131ce7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846130b8565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613210826126f1565b915061321b836126f1565b92508261322b5761322a6131d6565b5b828204905092915050565b6000613241826128f6565b915061324c836128f6565b92508261325c5761325b6131d6565b5b828204905092915050565b6000613272826128f6565b915061327d836128f6565b925082820261328b816128f6565b915080821461329d5761329c612f1b565b5b5092915050565b60006132af826128f6565b91506132ba836128f6565b9250828203905060ff8111156132d3576132d2612f1b565b5b92915050565b60006132e4826126f1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361331657613315612f1b565b5b600182019050919050565b600061332c826126f1565b91506000820361333f5761333e612f1b565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b60006133806020836125d8565b915061338b8261334a565b602082019050919050565b600060208201905081810360008301526133af81613373565b9050919050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b60006134126025836125d8565b915061341d826133b6565b604082019050919050565b6000602082019050818103600083015261344181613405565b9050919050565b6000613453826128f6565b915061345e836128f6565b92508261346e5761346d6131d6565b5b828206905092915050565b600081905092915050565b600061348f826125cd565b6134998185613479565b93506134a98185602086016125e9565b80840191505092915050565b60006134c18285613484565b91506134cd8284613484565b91508190509392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006135356026836125d8565b9150613540826134d9565b604082019050919050565b6000602082019050818103600083015261356481613528565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006135c76024836125d8565b91506135d28261356b565b604082019050919050565b600060208201905081810360008301526135f6816135ba565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b60006136596022836125d8565b9150613664826135fd565b604082019050919050565b600060208201905081810360008301526136888161364c565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b60006136c5601d836125d8565b91506136d08261368f565b602082019050919050565b600060208201905081810360008301526136f4816136b8565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006137576025836125d8565b9150613762826136fb565b604082019050919050565b600060208201905081810360008301526137868161374a565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006137e96023836125d8565b91506137f48261378d565b604082019050919050565b60006020820190508181036000830152613818816137dc565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b600061387b6026836125d8565b91506138868261381f565b604082019050919050565b600060208201905081810360008301526138aa8161386e565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006138e76020836125d8565b91506138f2826138b1565b602082019050919050565b60006020820190508181036000830152613916816138da565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000613953601f836125d8565b915061395e8261391d565b602082019050919050565b6000602082019050818103600083015261398281613946565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b60006139e56021836125d8565b91506139f082613989565b604082019050919050565b60006020820190508181036000830152613a14816139d8565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b6000613a776022836125d8565b9150613a8282613a1b565b604082019050919050565b60006020820190508181036000830152613aa681613a6a565b9050919050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b6000613ae36014836125d8565b9150613aee82613aad565b602082019050919050565b60006020820190508181036000830152613b1281613ad6565b9050919050565b6000613b258284613484565b915081905092915050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b6000613b666010836125d8565b9150613b7182613b30565b602082019050919050565b60006020820190508181036000830152613b9581613b59565b905091905056fea2646970667358221220ff6ac6dc32bd778c8ec704a9e11ec67e14247b7c809c2776babf1d9507347e3564736f6c634300081200334f6e6c7920746865206f776e6572202820257320292063616e2063616c6c20746869732066756e6374696f6e2e2053656e646572206973206e6f74207468652063757272656e744f776e65723a20282025732029",
}

// ApiABI is the input ABI used to generate the binding from.
// Deprecated: Use ApiMetaData.ABI instead.
var ApiABI = ApiMetaData.ABI

// ApiBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ApiMetaData.Bin instead.
var ApiBin = ApiMetaData.Bin

// DeployApi deploys a new Ethereum contract, binding an instance of Api to it.
func DeployApi(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Api, error) {
	parsed, err := ApiMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ApiBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Api{ApiCaller: ApiCaller{contract: contract}, ApiTransactor: ApiTransactor{contract: contract}, ApiFilterer: ApiFilterer{contract: contract}}, nil
}

// Api is an auto generated Go binding around an Ethereum contract.
type Api struct {
	ApiCaller     // Read-only binding to the contract
	ApiTransactor // Write-only binding to the contract
	ApiFilterer   // Log filterer for contract events
}

// ApiCaller is an auto generated read-only Go binding around an Ethereum contract.
type ApiCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ApiTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ApiTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ApiFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ApiFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ApiSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ApiSession struct {
	Contract     *Api              // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ApiCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ApiCallerSession struct {
	Contract *ApiCaller    // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// ApiTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ApiTransactorSession struct {
	Contract     *ApiTransactor    // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ApiRaw is an auto generated low-level Go binding around an Ethereum contract.
type ApiRaw struct {
	Contract *Api // Generic contract binding to access the raw methods on
}

// ApiCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ApiCallerRaw struct {
	Contract *ApiCaller // Generic read-only contract binding to access the raw methods on
}

// ApiTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ApiTransactorRaw struct {
	Contract *ApiTransactor // Generic write-only contract binding to access the raw methods on
}

// NewApi creates a new instance of Api, bound to a specific deployed contract.
func NewApi(address common.Address, backend bind.ContractBackend) (*Api, error) {
	contract, err := bindApi(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Api{ApiCaller: ApiCaller{contract: contract}, ApiTransactor: ApiTransactor{contract: contract}, ApiFilterer: ApiFilterer{contract: contract}}, nil
}

// NewApiCaller creates a new read-only instance of Api, bound to a specific deployed contract.
func NewApiCaller(address common.Address, caller bind.ContractCaller) (*ApiCaller, error) {
	contract, err := bindApi(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ApiCaller{contract: contract}, nil
}

// NewApiTransactor creates a new write-only instance of Api, bound to a specific deployed contract.
func NewApiTransactor(address common.Address, transactor bind.ContractTransactor) (*ApiTransactor, error) {
	contract, err := bindApi(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ApiTransactor{contract: contract}, nil
}

// NewApiFilterer creates a new log filterer instance of Api, bound to a specific deployed contract.
func NewApiFilterer(address common.Address, filterer bind.ContractFilterer) (*ApiFilterer, error) {
	contract, err := bindApi(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ApiFilterer{contract: contract}, nil
}

// bindApi binds a generic wrapper to an already deployed contract.
func bindApi(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ApiMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Api *ApiRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Api.Contract.ApiCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Api *ApiRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Api.Contract.ApiTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Api *ApiRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Api.Contract.ApiTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Api *ApiCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Api.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Api *ApiTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Api.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Api *ApiTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Api.Contract.contract.Transact(opts, method, params...)
}

// GetSupply is a free data retrieval call binding the contract method 0x7f908bf2.
//
// Solidity: function GetSupply() view returns(uint256)
func (_Api *ApiCaller) GetSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "GetSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetSupply is a free data retrieval call binding the contract method 0x7f908bf2.
//
// Solidity: function GetSupply() view returns(uint256)
func (_Api *ApiSession) GetSupply() (*big.Int, error) {
	return _Api.Contract.GetSupply(&_Api.CallOpts)
}

// GetSupply is a free data retrieval call binding the contract method 0x7f908bf2.
//
// Solidity: function GetSupply() view returns(uint256)
func (_Api *ApiCallerSession) GetSupply() (*big.Int, error) {
	return _Api.Contract.GetSupply(&_Api.CallOpts)
}

// AddToString is a free data retrieval call binding the contract method 0x53191503.
//
// Solidity: function addToString(address _address) pure returns(string)
func (_Api *ApiCaller) AddToString(opts *bind.CallOpts, _address common.Address) (string, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "addToString", _address)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// AddToString is a free data retrieval call binding the contract method 0x53191503.
//
// Solidity: function addToString(address _address) pure returns(string)
func (_Api *ApiSession) AddToString(_address common.Address) (string, error) {
	return _Api.Contract.AddToString(&_Api.CallOpts, _address)
}

// AddToString is a free data retrieval call binding the contract method 0x53191503.
//
// Solidity: function addToString(address _address) pure returns(string)
func (_Api *ApiCallerSession) AddToString(_address common.Address) (string, error) {
	return _Api.Contract.AddToString(&_Api.CallOpts, _address)
}

// AddressToString is a free data retrieval call binding the contract method 0x274695d3.
//
// Solidity: function address_to_string(address addr) view returns(string)
func (_Api *ApiCaller) AddressToString(opts *bind.CallOpts, addr common.Address) (string, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "address_to_string", addr)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// AddressToString is a free data retrieval call binding the contract method 0x274695d3.
//
// Solidity: function address_to_string(address addr) view returns(string)
func (_Api *ApiSession) AddressToString(addr common.Address) (string, error) {
	return _Api.Contract.AddressToString(&_Api.CallOpts, addr)
}

// AddressToString is a free data retrieval call binding the contract method 0x274695d3.
//
// Solidity: function address_to_string(address addr) view returns(string)
func (_Api *ApiCallerSession) AddressToString(addr common.Address) (string, error) {
	return _Api.Contract.AddressToString(&_Api.CallOpts, addr)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Api *ApiCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Api *ApiSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _Api.Contract.Allowance(&_Api.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Api *ApiCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _Api.Contract.Allowance(&_Api.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_Api *ApiCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_Api *ApiSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _Api.Contract.BalanceOf(&_Api.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_Api *ApiCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _Api.Contract.BalanceOf(&_Api.CallOpts, account)
}

// Bytes32ToHexString is a free data retrieval call binding the contract method 0xc68b3787.
//
// Solidity: function bytes32ToHexString(bytes32 _bytes32) pure returns(string)
func (_Api *ApiCaller) Bytes32ToHexString(opts *bind.CallOpts, _bytes32 [32]byte) (string, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "bytes32ToHexString", _bytes32)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Bytes32ToHexString is a free data retrieval call binding the contract method 0xc68b3787.
//
// Solidity: function bytes32ToHexString(bytes32 _bytes32) pure returns(string)
func (_Api *ApiSession) Bytes32ToHexString(_bytes32 [32]byte) (string, error) {
	return _Api.Contract.Bytes32ToHexString(&_Api.CallOpts, _bytes32)
}

// Bytes32ToHexString is a free data retrieval call binding the contract method 0xc68b3787.
//
// Solidity: function bytes32ToHexString(bytes32 _bytes32) pure returns(string)
func (_Api *ApiCallerSession) Bytes32ToHexString(_bytes32 [32]byte) (string, error) {
	return _Api.Contract.Bytes32ToHexString(&_Api.CallOpts, _bytes32)
}

// CharToHexChar is a free data retrieval call binding the contract method 0x17184d12.
//
// Solidity: function charToHexChar(bytes1 _char) pure returns(bytes1)
func (_Api *ApiCaller) CharToHexChar(opts *bind.CallOpts, _char [1]byte) ([1]byte, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "charToHexChar", _char)

	if err != nil {
		return *new([1]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([1]byte)).(*[1]byte)

	return out0, err

}

// CharToHexChar is a free data retrieval call binding the contract method 0x17184d12.
//
// Solidity: function charToHexChar(bytes1 _char) pure returns(bytes1)
func (_Api *ApiSession) CharToHexChar(_char [1]byte) ([1]byte, error) {
	return _Api.Contract.CharToHexChar(&_Api.CallOpts, _char)
}

// CharToHexChar is a free data retrieval call binding the contract method 0x17184d12.
//
// Solidity: function charToHexChar(bytes1 _char) pure returns(bytes1)
func (_Api *ApiCallerSession) CharToHexChar(_char [1]byte) ([1]byte, error) {
	return _Api.Contract.CharToHexChar(&_Api.CallOpts, _char)
}

// CheckHash is a free data retrieval call binding the contract method 0xb6eec244.
//
// Solidity: function checkHash(string hex_hash, string _orgMsg, string _avaxAdd) pure returns(bool)
func (_Api *ApiCaller) CheckHash(opts *bind.CallOpts, hex_hash string, _orgMsg string, _avaxAdd string) (bool, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "checkHash", hex_hash, _orgMsg, _avaxAdd)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckHash is a free data retrieval call binding the contract method 0xb6eec244.
//
// Solidity: function checkHash(string hex_hash, string _orgMsg, string _avaxAdd) pure returns(bool)
func (_Api *ApiSession) CheckHash(hex_hash string, _orgMsg string, _avaxAdd string) (bool, error) {
	return _Api.Contract.CheckHash(&_Api.CallOpts, hex_hash, _orgMsg, _avaxAdd)
}

// CheckHash is a free data retrieval call binding the contract method 0xb6eec244.
//
// Solidity: function checkHash(string hex_hash, string _orgMsg, string _avaxAdd) pure returns(bool)
func (_Api *ApiCallerSession) CheckHash(hex_hash string, _orgMsg string, _avaxAdd string) (bool, error) {
	return _Api.Contract.CheckHash(&_Api.CallOpts, hex_hash, _orgMsg, _avaxAdd)
}

// Compare is a free data retrieval call binding the contract method 0x3a96fdd7.
//
// Solidity: function compare(string a, string b) pure returns(bool)
func (_Api *ApiCaller) Compare(opts *bind.CallOpts, a string, b string) (bool, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "compare", a, b)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Compare is a free data retrieval call binding the contract method 0x3a96fdd7.
//
// Solidity: function compare(string a, string b) pure returns(bool)
func (_Api *ApiSession) Compare(a string, b string) (bool, error) {
	return _Api.Contract.Compare(&_Api.CallOpts, a, b)
}

// Compare is a free data retrieval call binding the contract method 0x3a96fdd7.
//
// Solidity: function compare(string a, string b) pure returns(bool)
func (_Api *ApiCallerSession) Compare(a string, b string) (bool, error) {
	return _Api.Contract.Compare(&_Api.CallOpts, a, b)
}

// CurrentOwner is a free data retrieval call binding the contract method 0xb387ef92.
//
// Solidity: function currentOwner() view returns(address)
func (_Api *ApiCaller) CurrentOwner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "currentOwner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// CurrentOwner is a free data retrieval call binding the contract method 0xb387ef92.
//
// Solidity: function currentOwner() view returns(address)
func (_Api *ApiSession) CurrentOwner() (common.Address, error) {
	return _Api.Contract.CurrentOwner(&_Api.CallOpts)
}

// CurrentOwner is a free data retrieval call binding the contract method 0xb387ef92.
//
// Solidity: function currentOwner() view returns(address)
func (_Api *ApiCallerSession) CurrentOwner() (common.Address, error) {
	return _Api.Contract.CurrentOwner(&_Api.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Api *ApiCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Api *ApiSession) Decimals() (uint8, error) {
	return _Api.Contract.Decimals(&_Api.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Api *ApiCallerSession) Decimals() (uint8, error) {
	return _Api.Contract.Decimals(&_Api.CallOpts)
}

// EstimateGasFee is a free data retrieval call binding the contract method 0x861458d8.
//
// Solidity: function estimateGasFee() view returns(uint256)
func (_Api *ApiCaller) EstimateGasFee(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "estimateGasFee")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EstimateGasFee is a free data retrieval call binding the contract method 0x861458d8.
//
// Solidity: function estimateGasFee() view returns(uint256)
func (_Api *ApiSession) EstimateGasFee() (*big.Int, error) {
	return _Api.Contract.EstimateGasFee(&_Api.CallOpts)
}

// EstimateGasFee is a free data retrieval call binding the contract method 0x861458d8.
//
// Solidity: function estimateGasFee() view returns(uint256)
func (_Api *ApiCallerSession) EstimateGasFee() (*big.Int, error) {
	return _Api.Contract.EstimateGasFee(&_Api.CallOpts)
}

// GetHexHash is a free data retrieval call binding the contract method 0xdd005a83.
//
// Solidity: function getHex_Hash(string _string1, string _string2) pure returns(string)
func (_Api *ApiCaller) GetHexHash(opts *bind.CallOpts, _string1 string, _string2 string) (string, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "getHex_Hash", _string1, _string2)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetHexHash is a free data retrieval call binding the contract method 0xdd005a83.
//
// Solidity: function getHex_Hash(string _string1, string _string2) pure returns(string)
func (_Api *ApiSession) GetHexHash(_string1 string, _string2 string) (string, error) {
	return _Api.Contract.GetHexHash(&_Api.CallOpts, _string1, _string2)
}

// GetHexHash is a free data retrieval call binding the contract method 0xdd005a83.
//
// Solidity: function getHex_Hash(string _string1, string _string2) pure returns(string)
func (_Api *ApiCallerSession) GetHexHash(_string1 string, _string2 string) (string, error) {
	return _Api.Contract.GetHexHash(&_Api.CallOpts, _string1, _string2)
}

// GetSlice is a free data retrieval call binding the contract method 0x908c0eea.
//
// Solidity: function getSlice(string _str) pure returns((uint256,uint256))
func (_Api *ApiCaller) GetSlice(opts *bind.CallOpts, _str string) (VidarUtilitiesslice, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "getSlice", _str)

	if err != nil {
		return *new(VidarUtilitiesslice), err
	}

	out0 := *abi.ConvertType(out[0], new(VidarUtilitiesslice)).(*VidarUtilitiesslice)

	return out0, err

}

// GetSlice is a free data retrieval call binding the contract method 0x908c0eea.
//
// Solidity: function getSlice(string _str) pure returns((uint256,uint256))
func (_Api *ApiSession) GetSlice(_str string) (VidarUtilitiesslice, error) {
	return _Api.Contract.GetSlice(&_Api.CallOpts, _str)
}

// GetSlice is a free data retrieval call binding the contract method 0x908c0eea.
//
// Solidity: function getSlice(string _str) pure returns((uint256,uint256))
func (_Api *ApiCallerSession) GetSlice(_str string) (VidarUtilitiesslice, error) {
	return _Api.Contract.GetSlice(&_Api.CallOpts, _str)
}

// IsValidAVAXAddress is a free data retrieval call binding the contract method 0xa3fa67ed.
//
// Solidity: function isValidAVAXAddress(address _address) view returns(bool)
func (_Api *ApiCaller) IsValidAVAXAddress(opts *bind.CallOpts, _address common.Address) (bool, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "isValidAVAXAddress", _address)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidAVAXAddress is a free data retrieval call binding the contract method 0xa3fa67ed.
//
// Solidity: function isValidAVAXAddress(address _address) view returns(bool)
func (_Api *ApiSession) IsValidAVAXAddress(_address common.Address) (bool, error) {
	return _Api.Contract.IsValidAVAXAddress(&_Api.CallOpts, _address)
}

// IsValidAVAXAddress is a free data retrieval call binding the contract method 0xa3fa67ed.
//
// Solidity: function isValidAVAXAddress(address _address) view returns(bool)
func (_Api *ApiCallerSession) IsValidAVAXAddress(_address common.Address) (bool, error) {
	return _Api.Contract.IsValidAVAXAddress(&_Api.CallOpts, _address)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Api *ApiCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Api *ApiSession) Name() (string, error) {
	return _Api.Contract.Name(&_Api.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Api *ApiCallerSession) Name() (string, error) {
	return _Api.Contract.Name(&_Api.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Api *ApiCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Api *ApiSession) Owner() (common.Address, error) {
	return _Api.Contract.Owner(&_Api.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Api *ApiCallerSession) Owner() (common.Address, error) {
	return _Api.Contract.Owner(&_Api.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Api *ApiCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Api *ApiSession) Paused() (bool, error) {
	return _Api.Contract.Paused(&_Api.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Api *ApiCallerSession) Paused() (bool, error) {
	return _Api.Contract.Paused(&_Api.CallOpts)
}

// Printf is a free data retrieval call binding the contract method 0x9a329a26.
//
// Solidity: function printf(string format, string[] args) pure returns(string)
func (_Api *ApiCaller) Printf(opts *bind.CallOpts, format string, args []string) (string, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "printf", format, args)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Printf is a free data retrieval call binding the contract method 0x9a329a26.
//
// Solidity: function printf(string format, string[] args) pure returns(string)
func (_Api *ApiSession) Printf(format string, args []string) (string, error) {
	return _Api.Contract.Printf(&_Api.CallOpts, format, args)
}

// Printf is a free data retrieval call binding the contract method 0x9a329a26.
//
// Solidity: function printf(string format, string[] args) pure returns(string)
func (_Api *ApiCallerSession) Printf(format string, args []string) (string, error) {
	return _Api.Contract.Printf(&_Api.CallOpts, format, args)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Api *ApiCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Api *ApiSession) Symbol() (string, error) {
	return _Api.Contract.Symbol(&_Api.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Api *ApiCallerSession) Symbol() (string, error) {
	return _Api.Contract.Symbol(&_Api.CallOpts)
}

// ToHexString is a free data retrieval call binding the contract method 0x63e1cbea.
//
// Solidity: function toHexString(uint256 value, uint256 length) pure returns(string)
func (_Api *ApiCaller) ToHexString(opts *bind.CallOpts, value *big.Int, length *big.Int) (string, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "toHexString", value, length)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ToHexString is a free data retrieval call binding the contract method 0x63e1cbea.
//
// Solidity: function toHexString(uint256 value, uint256 length) pure returns(string)
func (_Api *ApiSession) ToHexString(value *big.Int, length *big.Int) (string, error) {
	return _Api.Contract.ToHexString(&_Api.CallOpts, value, length)
}

// ToHexString is a free data retrieval call binding the contract method 0x63e1cbea.
//
// Solidity: function toHexString(uint256 value, uint256 length) pure returns(string)
func (_Api *ApiCallerSession) ToHexString(value *big.Int, length *big.Int) (string, error) {
	return _Api.Contract.ToHexString(&_Api.CallOpts, value, length)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Api *ApiCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Api.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Api *ApiSession) TotalSupply() (*big.Int, error) {
	return _Api.Contract.TotalSupply(&_Api.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Api *ApiCallerSession) TotalSupply() (*big.Int, error) {
	return _Api.Contract.TotalSupply(&_Api.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Api *ApiTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Api *ApiSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Api.Contract.Approve(&_Api.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Api *ApiTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Api.Contract.Approve(&_Api.TransactOpts, spender, amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns()
func (_Api *ApiTransactor) Burn(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "burn", amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns()
func (_Api *ApiSession) Burn(amount *big.Int) (*types.Transaction, error) {
	return _Api.Contract.Burn(&_Api.TransactOpts, amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns()
func (_Api *ApiTransactorSession) Burn(amount *big.Int) (*types.Transaction, error) {
	return _Api.Contract.Burn(&_Api.TransactOpts, amount)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 amount) returns()
func (_Api *ApiTransactor) BurnFrom(opts *bind.TransactOpts, account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "burnFrom", account, amount)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 amount) returns()
func (_Api *ApiSession) BurnFrom(account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Api.Contract.BurnFrom(&_Api.TransactOpts, account, amount)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 amount) returns()
func (_Api *ApiTransactorSession) BurnFrom(account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Api.Contract.BurnFrom(&_Api.TransactOpts, account, amount)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_Api *ApiTransactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_Api *ApiSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _Api.Contract.DecreaseAllowance(&_Api.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_Api *ApiTransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _Api.Contract.DecreaseAllowance(&_Api.TransactOpts, spender, subtractedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_Api *ApiTransactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_Api *ApiSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _Api.Contract.IncreaseAllowance(&_Api.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_Api *ApiTransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _Api.Contract.IncreaseAllowance(&_Api.TransactOpts, spender, addedValue)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address to, uint256 amount) returns()
func (_Api *ApiTransactor) Mint(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "mint", to, amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address to, uint256 amount) returns()
func (_Api *ApiSession) Mint(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Api.Contract.Mint(&_Api.TransactOpts, to, amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address to, uint256 amount) returns()
func (_Api *ApiTransactorSession) Mint(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Api.Contract.Mint(&_Api.TransactOpts, to, amount)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Api *ApiTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Api *ApiSession) Pause() (*types.Transaction, error) {
	return _Api.Contract.Pause(&_Api.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Api *ApiTransactorSession) Pause() (*types.Transaction, error) {
	return _Api.Contract.Pause(&_Api.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Api *ApiTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Api *ApiSession) RenounceOwnership() (*types.Transaction, error) {
	return _Api.Contract.RenounceOwnership(&_Api.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Api *ApiTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Api.Contract.RenounceOwnership(&_Api.TransactOpts)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_Api *ApiTransactor) Transfer(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "transfer", to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_Api *ApiSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Api.Contract.Transfer(&_Api.TransactOpts, to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_Api *ApiTransactorSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Api.Contract.Transfer(&_Api.TransactOpts, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_Api *ApiTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "transferFrom", from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_Api *ApiSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Api.Contract.TransferFrom(&_Api.TransactOpts, from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_Api *ApiTransactorSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Api.Contract.TransferFrom(&_Api.TransactOpts, from, to, amount)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Api *ApiTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Api *ApiSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Api.Contract.TransferOwnership(&_Api.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Api *ApiTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Api.Contract.TransferOwnership(&_Api.TransactOpts, newOwner)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Api *ApiTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Api.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Api *ApiSession) Unpause() (*types.Transaction, error) {
	return _Api.Contract.Unpause(&_Api.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Api *ApiTransactorSession) Unpause() (*types.Transaction, error) {
	return _Api.Contract.Unpause(&_Api.TransactOpts)
}

// ApiApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Api contract.
type ApiApprovalIterator struct {
	Event *ApiApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ApiApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ApiApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ApiApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ApiApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ApiApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ApiApproval represents a Approval event raised by the Api contract.
type ApiApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Api *ApiFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*ApiApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _Api.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &ApiApprovalIterator{contract: _Api.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Api *ApiFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *ApiApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _Api.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ApiApproval)
				if err := _Api.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Api *ApiFilterer) ParseApproval(log types.Log) (*ApiApproval, error) {
	event := new(ApiApproval)
	if err := _Api.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ApiOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Api contract.
type ApiOwnershipTransferredIterator struct {
	Event *ApiOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ApiOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ApiOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ApiOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ApiOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ApiOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ApiOwnershipTransferred represents a OwnershipTransferred event raised by the Api contract.
type ApiOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Api *ApiFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ApiOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Api.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ApiOwnershipTransferredIterator{contract: _Api.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Api *ApiFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ApiOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Api.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ApiOwnershipTransferred)
				if err := _Api.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Api *ApiFilterer) ParseOwnershipTransferred(log types.Log) (*ApiOwnershipTransferred, error) {
	event := new(ApiOwnershipTransferred)
	if err := _Api.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ApiPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the Api contract.
type ApiPausedIterator struct {
	Event *ApiPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ApiPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ApiPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ApiPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ApiPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ApiPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ApiPaused represents a Paused event raised by the Api contract.
type ApiPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Api *ApiFilterer) FilterPaused(opts *bind.FilterOpts) (*ApiPausedIterator, error) {

	logs, sub, err := _Api.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &ApiPausedIterator{contract: _Api.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Api *ApiFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *ApiPaused) (event.Subscription, error) {

	logs, sub, err := _Api.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ApiPaused)
				if err := _Api.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Api *ApiFilterer) ParsePaused(log types.Log) (*ApiPaused, error) {
	event := new(ApiPaused)
	if err := _Api.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ApiTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Api contract.
type ApiTransferIterator struct {
	Event *ApiTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ApiTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ApiTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ApiTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ApiTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ApiTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ApiTransfer represents a Transfer event raised by the Api contract.
type ApiTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Api *ApiFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*ApiTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Api.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ApiTransferIterator{contract: _Api.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Api *ApiFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ApiTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Api.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ApiTransfer)
				if err := _Api.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Api *ApiFilterer) ParseTransfer(log types.Log) (*ApiTransfer, error) {
	event := new(ApiTransfer)
	if err := _Api.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ApiUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the Api contract.
type ApiUnpausedIterator struct {
	Event *ApiUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ApiUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ApiUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ApiUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ApiUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ApiUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ApiUnpaused represents a Unpaused event raised by the Api contract.
type ApiUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Api *ApiFilterer) FilterUnpaused(opts *bind.FilterOpts) (*ApiUnpausedIterator, error) {

	logs, sub, err := _Api.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &ApiUnpausedIterator{contract: _Api.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Api *ApiFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *ApiUnpaused) (event.Subscription, error) {

	logs, sub, err := _Api.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ApiUnpaused)
				if err := _Api.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Api *ApiFilterer) ParseUnpaused(log types.Log) (*ApiUnpaused, error) {
	event := new(ApiUnpaused)
	if err := _Api.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
